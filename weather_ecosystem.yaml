########################### WEATHER MICROSERVICE DEPLOYMENT #####################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: weather-ecosystem-service
  namespace: default
  labels:
    app: weather-ecosystem-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: weather-ecosystem-service
  template:
    metadata:
      labels:
        app: weather-ecosystem-service
    spec:
      containers:
        - name: weather-ecosystem-service
          image: lindq181/weather_ecosystem_service:latest
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "128Mi"
              cpu: "500m"
            limits:
              memory: "256Mi"
              cpu: "1000m"
---
############################ PRODUCER MICROSERVICE DEPLOYMENT ####################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: we-producer-service
  namespace: default
  labels:
    app: we-producer-service
spec:
  replicas: 1
  selector:
    matchLabels:
      app: we-producer-service
  template:
    metadata:
      labels:
        app: we-producer-service
    spec:
      containers:
        - name: we-producer-service
          image: lindq181/we_producer_service:latest
          ports:
            - containerPort: 8080
          resources:
            requests:
              memory: "128Mi"
              cpu: "500m"
            limits:
              memory: "256Mi"
              cpu: "1000m"
---
########################### ZOOKEEPER DEPLOYMENT #####################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cp-zookeeper
  namespace: default
  labels:
    app: cp-zookeeper
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cp-zookeeper
  template:
    metadata:
      labels:
        app: cp-zookeeper
    spec:
      containers:
        - image: confluentinc/cp-kafka:7.4.5
          imagePullPolicy: IfNotPresent
          name: cp-zookeeper
          ports:
            - containerPort: 2181
          resources:
            requests:
              memory: "128Mi"
              cpu: "125m"
            limits:
              memory: "256Mi"
              cpu: "250m"
          env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
---
########################### KAFKA DEPLOYMENT #####################################
apiVersion: apps/v1
kind: Deployment
metadata:
  name: cp-kafka
  labels:
    app: cp-kafka
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: cp-kafka
  template:
    metadata:
      labels:
        app: cp-kafka
    spec:
      containers:
        - name: cp-kafka
          image: confluentinc/cp-kafka:7.4.5
          ports:
            - containerPort: 9092
          resources:
            requests:
              memory: "128Mi"
              cpu: "125m"
            limits:
              memory: "256Mi"
              cpu: "250m"
          env:
            - name: KAFKA_BROKER_ID
              value: "99"
            # - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
            #   value: "1"
            - name: KAFKA_LISTENERS
              value: "SSL://:9092,SASL_PLAINTEXT://:29092"
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "SSL://${MY_POD_IP}:9092,SASL_PLAINTEXT://${MY_POD_IP}:29092"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "zookeeper-service:2181"
            - name: KAFKA_SSL_KEYSTORE_FILENAME
              value: ""
            # - name: KAFKA_SSL_KEY_CREDENTIALS
            #   value: "keystorepass"
            # - name: KAFKA_SSL_KEYSTORE_CREDENTIALS
            #   value: "keystorepass"
            # - name: KAFKA_SSL_CLIENT_AUTH
            #   value: "required"
            # - name: KAFKA_SSL_TRUSTSTORE_FILENAME
            #   value: "truststore.jks"
            # - name: KAFKA_SSL_TRUSTSTORE_CREDENTIALS
            #   value: "keystorepass"
            # - name: KAFKA_SASL_ENABLED_MECHANISMS
            #   value: "PLAIN"
            # - name: KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL
            #   value: "PLAIN"
            # - name: KAFKA_SECURITY_INTER_BROKER_PROTOCOL
            #   value: "SASL_PLAINTEXT"
            # - name: KAFKA_AUTHORIZER_CLASS_NAME
            #   value: "kafka.security.auth.SimpleAclAuthorizer"
            # - name: KAFKA_SUPER_USERS
            #   value: "User:CN=kafkaadmin;User:broker"
            # - name: CONFLUENT_SUPPORT_METRICS_ENABLE
            #   value: "0"
            # - name: KAFKA_LOG_DIRS
            #   value: "/var/lib/kafka/data/data"
            # - name: KAFKA_OPTS
            #   value: "-Djava.security.auth.login.config=/etc/kafka/jaas/jaas.conf"
---
############################# WEATHER MICROSERVICE SERVICE ###################################
apiVersion: v1
kind: Service
metadata:
  name: weather-ecosystem-service
  namespace: default
  labels:
    app: weather-ecosystem-service
spec:
  ports:
    - name: http
      protocol: TCP
      port: 8081
      targetPort: 8080
  selector:
    app: weather-ecosystem-service
  type: LoadBalancer
---
############################# PRODUCER MICROSERVICE SERVICE ###################################
apiVersion: v1
kind: Service
metadata:
  name: we-producer-service
  namespace: default
  labels:
    app: we-producer-service
spec:
  ports:
    - name: http
      protocol: TCP
      port: 8082
      targetPort: 8080
  selector:
    app: we-producer-service
  type: ClusterIP
---
############################ ZOOKEEPER SERVICE #######################################
# apiVersion: v1
# kind: Service
# metadata:
#   labels:
#     app: zookeeper-service
#   name: zookeeper-service
#   namespace: default
# spec:
#   type: NodePort
#   ports:
#     - name: zookeeper-port
#       port: 2181
#       nodePort: 30181
#       targetPort: 2181
#   selector:
#     app: zookeeper
